package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"os"
	"path"
	"runtime"
	"time"
)

//使用.Marshal(&bs)时
// // ID 不会导出到JSON中
// 	ID int `json:"-"`
// // 如果 ServerIP 为空，则不输出到JSON串中
// 	ServerIP string `json:"serverIP,omitempty"`
type book struct {
	Number int    //`json:"Number"` //can't use`json:"number,-"` ,it won't work,use `json:"-"` instead
	Name   string //`json:"Name,omitempty"`

	// Number int    `json:"Number"` //can't use`json:"number,-"` ,it won't work,use `json:"-"` instead
	// Name   string `json:"Name,omitempty"`
	// Name   string `json:"name,omitempty"`
}

func check(e error) {
	if e != nil {
		panic(e)
	}
}

func writeFile(b *[]byte) {
	f, err := os.Create("./file.json")
	check(err)
	defer f.Close()
	f.Write(*b)
}

//从json最取数据并导入到book结构体中
func jsonRead() {
	content, err := ioutil.ReadFile("./file.json")
	var bs book
	err = json.Unmarshal(content, &bs)
	if err != nil {
		panic(err.Error())
		return
	}
	// fmt.Printf("read result of file content: \n%v", bs)
	fmt.Printf("read result of file content: \n%+v", bs)
}

func Newbook(num int, name string) *book {
	return &book{Number: num, Name: name}
}
func init() {
	/*
		Caller reports file and line number information about function invocations on the calling goroutine's stack
		main() is under  GOROOT/xxx/runtime
		but this init is binding to current source file,and the file is under GOPATH,so the
	*/
	// WTF, i just want to set the RootDir as current dir.
	//why it is under GOROOT but not GOPATH, in ssp_rocket it is under GOPATH
	programCounter, filename, lineNumber, ok := runtime.Caller(1)
	//trim file name and get the path
	currentDir := path.Join(path.Dir(filename))
	// RootDir := path.Join(path.Dir(filename), "..")
	fmt.Printf("programCounter%d, currentDir%s, lineNumber%d, ok%d", programCounter, currentDir, lineNumber, ok)
	// println("RootDir: ", RootDir)
	// loadAnaMqFileConf()
	// _, filename, _, ok := runtime.Caller(1)
	if !ok {
		fmt.Println("true")
		return
	}

	// fmt.Printf("filename is %s\n dir %s\n", filename, RootDir)
}
func ticks() {
	ticker := time.NewTicker(time.Millisecond * 100)
	go func() {
		for t := range ticker.C {
			fmt.Println("Tick at", t)

		}

	}()
	time.Sleep(3 * time.Second)
	ticker.Stop()
}

func main() {
	// bs := &book{
	// 	Number: 100,
	// 	// Name:   "",
	// 	Name: `"okbookdamn  fe "`,
	// }
	// b, err := json.Marshal(&bs)
	// check(err)
	// writeFile(&b)
	// var a int
	// a = 10
	// var b map[string]int
	// b = make(map[string]int)
	// //equal to bellow
	// // b := make(map[string]int)
	//
	// b["dd"] = 19
	// fmt.Printf("demo %T", a)
	// fmt.Printf("demo %T", b)
	// fmt.Printf("\ndemo %#v", bs)

	ticks()
	time.Now()

	// jsonRead()
	// fmt.Printf("%+v", a.(type))
	// b := Newbook(10, "jialin's book")
	// fmt.Printf("%+v", b)
}
