package main

import (
// "encoding/json"
// "fmt"
// "os"
)

type fi interface {
	geta() int
	getbuf(bufa string) string
	getb() string
	// demo(pfs *fs)
	// demoaaaa()
}

func demoaaaa() {
	println("aaaaaaaaaa")
}

func demod(pfs *fs) {
	println("aaaaaaaaaa")
}

type fs struct {
	a int
	b string
	*sa
}

type sa struct {
	countp int
	s      string
}

func (t sa) sets2() {
	t.countp = 19
}
func (t *sa) sets() {
	t.countp = 20
}
func (t sa) gets2() {
	t.countp++
	println(t.s)
}

func (t *sa) gets() {
	t.countp++
	println(t.s)
}
func (t *sa) printp() {
	println("pointer :", t.countp)
}

func (t sa) printl() {
	println("value:", t.countp)
}
func (t fs) getb() string {
	return t.b
}
func (t fs) geta() int {

	return t.a
}

func (t fs) getbuf(s string) string {
	return t.b + s
}
func demo(f fi) {
	println(f.geta())
	println(f.getb())
	println(f.getbuf("dddd"))
	demoaaaa()
}

func main() {
	sdemo := sa{}
	sdemo2 := sa{}

	// sdemo.gets()
	// // sdemo.gets()
	// sdemo.gets2()
	// sdemo.sets()
	sdemo2.sets2()
	sdemo.printp()
	sdemo.printl()

	sdemo2.printp()

	demof := fs{a: 3, b: "abc", sa: &sa{s: "jialin"}}
	demof.sa.gets()
	demo(demof)
	// buffer := fmt.Sprintf("%+v", demof) //+v 显示 struct name and value
	// 	buffer := fmt.Sprintf("%v", demof)
}
