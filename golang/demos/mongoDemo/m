package mongoDemo

import (
	"fmt"

	"gopkg.in/mgo.v2"
	"gopkg.in/mgo.v2/bson"
)

type JPerson struct {
	Name  string
	Phone string
	Id    int

	// Name  string `json:"Name"`
	// Phone string `json:"Phone"`
	// Id    int    `json:"Id"`
}

type BPerson struct {
	Name  string `bson:"Name"`
	Phone string `bson:"Phone"`
	Id    int    `bson:"Id"`
}

func StructTagDemo() (err error) {
	println("<<<structTagDemo---------------------------")

	session, err := mgo.Dial("127.0.0.1:27017")
	if err != nil {
		return
	}
	defer session.Close()
	session.SetMode(mgo.Monotonic, true)
	c := session.DB("testdb").C("demo")

	//warn: if not specific a bson tag, all file name will convert to lower case

	// err = c.Insert(&JPerson{"json", "+222222222fjefei22", 1})
	// err = c.Insert(&BPerson{"bson", "+222222222fjefei22", 1})
	// if err != nil {
	// 	return
	// }

	// result := []*BPerson{}
	result := []*BPerson{}

	// singleResult := BPersonow}
	// err = c.Find(bson.M{"Name": "bson"}).One(&singleResult)

	// err = c.FindId(bson.M{"Name": "bson"}).One(&result)
	// err = c.Find(bson.M{}).All(&result)
	// err = c.Find(bson.M{"Id": bson.M{"$in": []int{2, 3}}}).All(&result)
	// err = c.Find(bson.M{"Phone": "+222222222fjefei22", "Id": bson.M{"$in": []int{1, 1, 1}}}).All(&result)
	err = c.Find(bson.M{"Name": "json", "Id": bson.M{"$in": []int{1, 1, 1}}}).All(&result)
	// err = c.Find(bson.M{"Name": "bsxon"}).All(&result)
	if err != nil {
		fmt.Println("not found")
		return
	}
	fmt.Println("found")
	// fmt.Printf("singleResult: %+v\n",singleResult)

	fmt.Printf("  len(result): %+v\n", len(result))
	for k, v := range result {
		fmt.Printf("%+v: %+v\n", k, v)
	}

	println("-----------------------------structTagDemo>>>")
	return
}
