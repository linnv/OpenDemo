extends c

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet beginend "$1.begin(), $1.end() (beginend)"
${1:v}${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}begin(), $1${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}end()
endsnippet

snippet cl "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "name"`}
{
public:
	${1/(\w+).*/$1/} (${2:arguments});
	virtual ~${1/(\w+).*/$1/} ();

private:
	${0:/* data */}
};
endsnippet

snippet ns "namespace .. (namespace)"
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`}
{
	${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}${1/.+/ \/* /m}$1${1/.+/ *\/ /m}
endsnippet

snippet readfile "read file (readF)"
std::vector<char> v;
if (FILE *fp = fopen(${1:"filename"}, "r"))
{
	char buf[1024];
	while(size_t len = fread(buf, 1, sizeof(buf), fp))
		v.insert(v.end(), buf, buf + len);
	fclose(fp);
}
endsnippet

snippet map "std::map (map)"
std::map<${1:key}, ${2:value}> map$0;
endsnippet

snippet vector "std::vector (v)"
std::vector<${1:char}> v$0;
endsnippet

snippet tp "template <typename ..> (template)"
template <typename ${1:_InputIter}>
endsnippet

snippet cma "make a comment"
/*
 *Description| 
 *		$1
 *Parameters|
 *		$2
 *Return Value|
 *		$3
 *Author| 
 * 		Jialin Wu
 */
endsnippet
snippet cmb "make a comment"
/*
 *Description| 
 *		$1
 *Parameters|
 *		$2
 *Return Value|
 *		$3
 *Comment by| 
 *		Jialin Wu
 */
endsnippet
snippet bae "showing output in stat:  before after end"
	cout<<"====================before======================\n";
	cout<<$1<<"\n";
	cout<<"=====================before_end========================\n";
	$2
	cout<<"====================after=======================\n";
	cout<<${1/(\w+).*/$1/}<<"\n";
	cout<<"=====================after_end========================\n";
	
endsnippet

snippet sgtercpp "setter and getter for class menbers for detail" !b
void  $1::set$2(const $3 &tmpData)
		{
			$2=tmpData;	
		}
const $3 $1::get$2()
		{
			return $2;	
		}
endsnippet

snippet sgterh "setter and getter for class menbers in header" !b
void  set$1(const $2 &tmpData);
const $2 get$1();

endsnippet

snippet datetime
${2:${1:`date +%Y`}-`date +%m`}-`date +%d`:`date +%H`:`date +%M`:`date +%S`
endsnippet

snippet date
${2:${1:`date +%Y`}-`date +%m`}-`date +%d`
endsnippet

snippet funDemo "function for demo" !b
${1:void} ${2:function_name}Demo(${3})
{
	printf("========================$2 start=========== \n");
	${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
	printf("========================$2 end============= \n");
}
endsnippet

snippet funDemoTime "function for demo with time caculation" !b
${1:void} ${2:function_name}Demo(${3})
{
	timespec start,end;
	clock_gettime(CLOCK_THREAD_CPUTIME_ID,&start);
	printf("========================$2 start=========== \n");
	${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
	clock_gettime(CLOCK_THREAD_CPUTIME_ID,&end);
	printf("========================$2 end============= \n");
	unsigned int rest=(end.tv_sec-start.tv_sec)*1e9+(end.tv_nsec-start.tv_nsec);
	printf("costs %fms",double(rest/1e6));
}
endsnippet
snippet prinfAddress "print address of variable" !b
printf("$1[%x]\n", $1);
endsnippet
