// Package main provides ...
// ver.sion0.9
package main

import (
	"fmt"
	"log"
	"runtime"
	"sync"
	"time"
)

type TerminalCilent struct {
	Result   int64 `json:"Result"`
	ChanId   int64
	ToCenter bool
	ExtraMSG interface{} `json:"ExtraMSG "`
}

var GolalTicketCount int64

type MonitorClient struct {
	Id           int64 `json:"Id          in"`
	sendChan     chan bool
	responcechan chan TerminalCilent
}

func BuckerMonitor(m MonitorClient, monitorExit chan bool) {
	for {
		m.sendChan <- true
		// for {
		select {
		case r := <-m.responcechan:
			fmt.Println()
			log.Printf("monitoring total ticker in db: %+v\n", r.Result)
			fmt.Println()
			time.Sleep(time.Microsecond * 500)
			m.sendChan <- true

		// break
		case <-monitorExit:
			log.Println("monitor exits: works\n")
			return
		}
		// }
		time.Sleep(time.Microsecond * 500)
	}
}

func DataCenter(t chan TerminalCilent, m MonitorClient, exit chan bool) {
	for {
		select {
		case r := <-t:
			//@TODO do somethine with data: write to db etc.
			log.Printf("request from : %+v\n", r.ChanId)
			log.Printf("r: %+v\n", r)
			GolalTicketCount += r.Result
			r.ToCenter = false
			t <- r
		case <-m.sendChan:
			m.responcechan <- TerminalCilent{Result: GolalTicketCount,
				ChanId:   0,
				ToCenter: true,
				ExtraMSG: "just for monitor"}
		case <-exit:
			return
		}
	}
}

func ConsumeNode(cid int64, t chan TerminalCilent, wg *sync.WaitGroup) {
	//@TODO
	t <- TerminalCilent{Result: 10 * cid,
		ChanId:   cid,
		ToCenter: true,
		ExtraMSG: "node for demo"}
	for {
		select {
		case r := <-t:
			if r.ChanId == cid && !r.ToCenter {
				// log.Printf("ok get responce from data center: works, %v exit\n", cid)
				// time.Sleep(time.Second * time.Duration(cid))
				time.Sleep(time.Second * time.Duration(1))
				// log.Printf("sleep %v second\n", time.Second)
				wg.Done()
				break
			}
			if r.ToCenter {
				// log.Printf("msg direction is to data center,%v redicts \n", cid)
			} else {
				// log.Printf("msg for %v not for %v,redict it\n", r.ChanId, cid)

			}
			t <- r
		}
	}
}

var wg sync.WaitGroup

func main() {
	runtime.GOMAXPROCS(2)
	wg.Add(10)
	dataCenterExit := make(chan bool)
	monitorExit := make(chan bool)

	t := make(chan TerminalCilent)
	m := MonitorClient{
		Id:           0,
		sendChan:     make(chan bool),
		responcechan: make(chan TerminalCilent),
	}
	//i is int not in64
	for i := 0; i < 10; i++ {
		go ConsumeNode(int64(i), t, &wg)
	}
	go DataCenter(t, m, dataCenterExit)
	go BuckerMonitor(m, monitorExit)
	wg.Wait()
	dataCenterExit <- true
	monitorExit <- true
}
