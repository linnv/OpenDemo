// Package main provides ...
package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"labix.org/v2/mgo"
	"labix.org/v2/mgo/bson"
	"os"
)

type User struct {
	Id int `json:"_id"`
	// Name string `json:"name,omitempty"`
	Name string `json:"name,-"`
	// Name string `json:"name,omitempty"`
	// Name string
	// Name string `json:"name"`
	// Id   int    `json:"id"`

}
type Server struct {
	A string `json:"aname"`

	ServerIP string
}
type Serverslice struct {
	Servers []Server
}

func um() {
	//json to struct
	var s Serverslice
	str := `{"servers":[{"aname":"Shanghai_VPN","serverIP":"127.0.0.1"},{"aname":"Beijing_VPN","serverIP":"127.0.0.2"}]}`
	json.Unmarshal([]byte(str), &s)
	fmt.Printf("%+v", s)
}
func jsonTagWrite() {
	type Server struct {
		// ID 不会导出到JSON中
		ID int `json:"-"`

		// ServerName 的值会进行二次JSON编码
		// ServerName  string `json:"serverName"`
		// ServerName2 string `json:"serverName2,string"`
		// ServerName4 string `json:"serverName4,string"`

		// ServerName 的值会进行二次JSON编码
		ServerName  string `json:"serverName"`
		ServerName2 string `json:"serverName2"`
		ServerName4 string `json:"serverName4"`

		// 如果 ServerIP 为空，则不输出到JSON串中
		ServerIP string `json:"serverIP,omitempty"`
		// ServerIP string `json:"-"`
	}

	s := Server{
		ID:          3,
		ServerName:  "namexxxxx",
		ServerName4: "just for fun name2",
		ServerName2: "ddddddname2",
		ServerIP:    `222`,

		// ServerName:  `Go "1.0" `,
		// ServerName4: "just for fun",
		// ServerName2: `Go "1.0" `,
		// ServerIP:    ``,
	}
	b, _ := json.Marshal(s)
	f, err := os.Create("./dat2")
	check(err)
	writeCount, err := f.Write(b)
	fmt.Printf("wrote %d bytes\n", writeCount)
	f.Sync()
	defer f.Close()
	// or.Steck()out.Write(b)
}
func jsonTagRead() {
	type mytype []map[string]string
	type Server struct {
		// ID 不会导出到JSON中
		ID int `json:"-"`

		// ServerName 的值会进行二次JSON编码
		// ServerName  string `json:"serverName"`
		// ServerName2 string `json:"serverName2,string"`
		// ServerName4 string `json:"serverName4,string"`

		// ServerName 的值会进行二次JSON编码
		ServerName  string `json:"serverName"`
		ServerName2 string `json:"serverName2"`
		ServerName4 string `json:"serverName4"`

		// 如果 ServerIP 为空，则不输出到JSON串中
		ServerIP string `json:"serverIP,omitempty"`
		// ServerIP string `json:"-"`
	}
	var b []byte
	s := Server{}
	b, err := ioutil.ReadFile("./dat2")
	fmt.Printf("\nfile's content: \n%s\n", b)

	// var data mytype
	// err = bson.Unmarshal(b, &data)

	err = bson.Unmarshal(b, &s)
	if err != nil {
		panic(err.Error())
	}
	// fmt.Printf("\nd%s", data)
	// fmt.Printf("\nd1:%+v", s)
}

func check(e error) {
	if e != nil {
		panic(e)
	}

}
func mongo() {

	session, err := mgo.Dial("127.0.0.1") //要连接的服务器和端口
	// session, err := mgo.Dial("127.0.0.1:3000") //要连接的服务器和端口
	if err != nil {
		panic(err)

	}
	defer session.Close()
	//获取数据库，获取集合
	c := session.DB("test").C("test")
	// result := User{}
	// err = c.Find(bson.M{}).One(&result) //payway为数据库中的字段
	// if err != nil {
	// 	panic(err)
	// }
	// fmt.Printf("%+v\n", result)
	// newTest := User{"sunteng", 1199}
	// tmp, err := bson.Marshal(newTest)
	// if err != nil {
	// 	panic(err)
	// }
	// fmt.Printf("%+v\n", tmp)
	// c.Insert(&newTest)
	multiResult := []*User{}
	// multiResult := []User{}
	// result := User{}
	// var multiResult interface{}
	// err = c.Find(&bson.M{"Name": "abc"}).One(&result)
	// err = c.Find(&bson.M{"Name": "xxx"}).One(&result)

	arr := [...]int{100, 199}
	query := bson.M{"id": bson.M{"$in": arr}}
	// query := bson.M{"id": 100, "name": "abc"}
	// err = c.Find(&bson.M{"_id": bson.M{"$in": 199}}).All(&multiResult)
	err = c.Find(query).All(&multiResult) //payway为数据库中的字段
	// err = c.Find(&bson.M{}).All(&multiResult) //payway为数据库中的字段
	if err != nil {
		println("not found ")
		// panic(err)
	}
	println("\nfound")
	//
	println(len(multiResult))

	for i := 0; i < len(multiResult); i++ {
		fmt.Printf("%+v\n", multiResult[i])
	}
	// fmt.Printf("%+v", multiResult)
}
func main() {
	jsonTagWrite()
	um()
	jsonTagRead()
}
